import requests
import concurrent.futures
import time
import os
from tkinter import filedialog, Tk
from urllib.parse import urlparse


def get_country_flag(country_name):
    country_flags = {
        'Russia': '\U0001F1F7\U0001F1FA',
        'United States': '\U0001F1FA\U0001F1F8',
        'Unknown': '\U0001F3F3',
    }
    return country_flags.get(country_name, '\U0001F3F3')


def check_proxy(proxy, lang, results):
    try:
        start_time = time.time()
        response = requests.get('http://httpbin.org/ip', proxies={'http': proxy, 'https': proxy}, timeout=5)
        delay = (time.time() - start_time) * 1000  # delay in milliseconds
        if response.status_code == 200:
            parsed_url = urlparse(proxy)
            ip_address = parsed_url.hostname
            ip_info = requests.get(f'http://ip-api.com/json/{ip_address}').json()
            country = ip_info.get('country', 'Unknown' if lang == 'en' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            flag = get_country_flag(country)
            status = 'Working'
        else:
            country, flag, status = 'Unknown', get_country_flag('Unknown'), 'Not Working'
        results.append([proxy, f'{delay:.2f} ms', f'{flag} {country}', status])
    except requests.RequestException:
        results.append([proxy, 'N/A', 'Unknown', 'Not Working'])


def load_proxies_from_file():
    Tk().withdraw()  # –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ Tkinter
    file_path = filedialog.askopenfilename(title="Select file with proxies")
    if file_path:
        with open(file_path, 'r') as file:
            return [line.strip() for line in file]
    return []


def main():
    os.system('cls' if os.name == 'nt' else 'clear')
    ascii_art = r"""
    ______    ____    __     ____    _   __   _____    ____       
   / ____/   /  _/   / /    /  _/   / | / /  / ___/   /  _/       
  / /_       / /    / /     / /    /  |/ /   \__ \    / /         
 / __/     _/ /    / /___ _/ /    / /|  /   ___/ /  _/ /          
/_/       /___/   /_____//___/   /_/ |_/   /____/  /___/    
                    Proxy Checker v0.5     
    """
    print(ascii_art + '\n' * 5)

    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    lang_choice = input("Choose language \n 1: üá¨üáß English \n 2: üá∑üá∫ –†—É—Å—Å–∫–∏–π \n ")
    lang = 'en' if lang_choice == '1' else 'ru'

    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        print(ascii_art)

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–∫—Å–∏
        if lang == 'en':
            print("1: Load proxy as a string")
            print("2: Load proxies from file")
            print("3: Enter proxy with login and password")
        else:
            print("1: –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏ —Å—Ç—Ä–æ–∫–æ–π")
            print("2: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞")
            print("3: –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º")

        choice = input("Select an option (1, 2, 3): ")
        proxies = []

        if choice == '1':
            proxy = input("Enter proxy (format: http://ip:port): " if lang == 'en' else "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ (—Ñ–æ—Ä–º–∞—Ç: http://ip:port): ")
            proxies.append(proxy)
        elif choice == '2':
            proxies = load_proxies_from_file()
            if not proxies:
                print("No proxies loaded. Returning to menu..." if lang == 'en' else "–ü—Ä–æ–∫—Å–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é...")
                continue
        elif choice == '3':
            username = input("Enter username: " if lang == 'en' else "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
            password = input("Enter password: " if lang == 'en' else "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            ip = input("Enter IP: " if lang == 'en' else "–í–≤–µ–¥–∏—Ç–µ IP: ")
            port = input("Enter port: " if lang == 'en' else "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç: ")
            proxy = f'http://{username}:{password}@{ip}:{port}'
            proxies.append(proxy)
        else:
            print("Invalid choice!" if lang == 'en' else "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            continue

        os.system('cls' if os.name == 'nt' else 'clear')
        print(ascii_art)

        results = []
        with concurrent.futures.ThreadPoolExecutor() as executor:
            executor.map(lambda p: check_proxy(p, lang, results), proxies)

        print("{:<30} {:<20} {:<30} {:<15}".format("Proxy", "Ping (ms)", "Country", "Status"))
        print("-" * 100)
        for row in results:
            print("{:<30} {:<20} {:<30} {:<15}".format(*row))

        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É
        continue_choice = input("\nDo you want to check more proxies? (y/n): " if lang == 'en' else "\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë –ø—Ä–æ–∫—Å–∏? (–¥/–Ω): ")
        if continue_choice.lower() not in ['y', '–¥']:
            break


if __name__ == '__main__':
    main()
